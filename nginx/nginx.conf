# Nginx Configuration
#
# This file configures Nginx as the API Gateway and reverse proxy for the microservices architecture.
# It handles routing, authentication checks, and load balancing across services.
#
# Key responsibilities:
# 1. Route requests to appropriate microservices
# 2. Enforce authentication via auth_request directive
# 3. Handle error responses and redirects
# 4. Manage session cookies across services
# 5. Serve static content
#
# Authentication flow:
# - Protected routes use auth_request to check authentication status
# - auth_request makes an internal request to /auth/check
# - /auth/check is handled by the Auth Service
# - If authenticated, the original request proceeds
# - If not authenticated, user is redirected to login

events {
    # Default event processing configuration
    # Controls how Nginx handles connections from clients
    worker_connections 1024;  # Maximum number of simultaneous connections
}


http {
    # HTTP server configuration
    # Defines how HTTP requests are processed


    # Upstream Definitions
    # These blocks define the backend services that Nginx will proxy requests to.
    # Each upstream represents a microservice in the architecture.

    # Admin Service - Handles administrative functions (port 8080)
    # - User management
    # - System configuration
    # - Administrative dashboards
    upstream admin-backend {
        server admin-service:8080;
    }


    # Inventory Service - Manages product inventory (port 8081)
    # - Stock levels
    # - Inventory management
    # - Supplier information
    upstream inventory-backend {
        server inventory-service:8081;
    }


    # Product Catalog Service - Manages product information (port 8082)
    # - Product listings
    # - Product details
    # - Catalog browsing
    # - Checkout process
    upstream products-backend {
        server product-catalog-service:8082;
    }


    # Order Management Service - Handles customer orders (port 8084)
    # - Order creation
    # - Order status tracking
    # - Order history
    upstream orders-backend {
        server order-management-service:8084;
    }


    # Data Access Service - Centralizes database operations (port 8085)
    # - Database CRUD operations
    # - Data validation
    # - Transaction management
    upstream data-access-backend {
        server data-access-service:8085;
    }


    # Auth Service - Handles authentication and authorization (port 8086)
    # - User login/logout
    # - Registration
    # - Session management
    # - Authentication checks
    upstream auth-backend {
        server auth-service:8086;
    }


    # Main Server Block
    # This defines the main HTTP server that handles all incoming requests.
    # It includes location blocks for routing requests to appropriate services.
    server {
        # Listen on port 80 for HTTP requests
        listen 80;


        # Serve static files
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }


        # Serve favicon.ico
        location = /favicon.ico {
            return 302 /static/favicon.svg;
        }

        # Serve favicon.svg without authentication
        location = /static/favicon.svg {
            alias /usr/share/nginx/html/static/favicon.svg;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            add_header Content-Type "image/svg+xml";
        }


        # Custom error pages
        error_page 404 /static/errors/404.html;
        location = /static/errors/404.html {
            root /usr/share/nginx/html;
            internal;
        }

        error_page 500 502 503 504 /static/errors/500.html;
        location = /static/errors/500.html {
            root /usr/share/nginx/html;
            internal;
        }


        # Admin routes are handled by the general /admin/ location below


        # Admin Routes
        # All administrative functionality is routed to the Admin Service.
        # These routes require both authentication and admin privileges.
        #
        # Security:
        # - Uses auth_request to verify authentication
        # - Auth Service checks if the user has admin privileges (type=2)
        # - Returns 403 Forbidden if user is authenticated but not an admin
        location /admin/ {
            # Verify authentication and admin privileges
            auth_request /auth/check;

            # Forward requests to Admin Service
            proxy_pass http://admin-backend/;

            # Pass client information to backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Session management
            proxy_set_header Cookie $http_cookie;
            proxy_cookie_path / /;

            # Error handling
            error_page 401 = @error401;  # Redirect to login if not authenticated
            error_page 403 = @error403;  # Redirect to home with error if not admin
        }


        # Authentication Routes
        # These routes handle user authentication and are publicly accessible.
        # They are not protected by auth_request since they're needed for login.
        #
        # Routes:
        # - /login: User login form and processing
        # - /register: New user registration
        # - /logout: User logout and session invalidation
        location ~ ^/(login|register|logout) {
            # Forward to Auth Service
            proxy_pass http://auth-backend;

            # Pass client information to backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Session cookie handling
            proxy_set_header Cookie $http_cookie;
            proxy_cookie_path / /;
        }


        # Protected inventory endpoint - auth-service will handle authentication check
        location /inventory {
            # Auth check is handled by auth-service
            auth_request /auth/check;
            # If authenticated, proxy to inventory service
            proxy_pass http://inventory-backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Session cookie handling
            proxy_set_header Cookie $http_cookie;
            proxy_cookie_path / /;


            # If not authenticated, redirect to login
            error_page 401 = @error401;
        }


        # Authentication Check Endpoint
        # This is a special internal location used by the auth_request directive.
        # It verifies if the user is authenticated and has appropriate permissions.
        #
        # How it works:
        # 1. When a protected route is accessed, Nginx makes an internal request to this endpoint
        # 2. This endpoint forwards the request to the Auth Service's /auth/check endpoint
        # 3. The Auth Service checks if the user is authenticated by examining the session cookie
        # 4. For admin routes, it also checks if the user has admin privileges
        # 5. Returns appropriate status codes:
        #    - 200 OK: User is authenticated (and has admin privileges for admin routes)
        #    - 401 Unauthorized: User is not authenticated
        #    - 403 Forbidden: User is authenticated but lacks required privileges
        location = /auth/check {
            # Only allow internal requests from other Nginx locations
            internal;

            # Forward to Auth Service's check endpoint
            proxy_pass http://auth-backend/auth/check;

            # Optimization: Don't pass request body to auth check
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            # Pass original request information for context
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;

            # Pass session cookie for authentication
            proxy_set_header Cookie $http_cookie;

            # Preserve the session cookie in the response
            proxy_pass_header Set-Cookie;
        }




        # Get current user endpoint
        location = /auth/user {
            proxy_pass http://auth-backend/auth/user;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }


        # Error Handling: 401 Unauthorized
        # This named location handles 401 (Unauthorized) responses from auth_request.
        # It redirects unauthenticated users to the login page.
        #
        # Used by:
        # - All protected routes that use auth_request
        # - Triggered when the Auth Service returns 401 from /auth/check
        #
        # Flow:
        # 1. User requests a protected resource
        # 2. auth_request determines user is not authenticated
        # 3. Nginx redirects to this named location
        # 4. User is redirected to login page
        # 5. After successful login, user is redirected to the original URL
        location @error401 {
            # 302 Found redirect to login page
            return 302 /login;
        }


        # Error Handling: 403 Forbidden
        # This named location handles 403 (Forbidden) responses from auth_request.
        # It redirects authenticated users who lack sufficient privileges.
        #
        # Used by:
        # - Admin routes when accessed by non-admin users
        # - Triggered when the Auth Service returns 403 from /auth/check
        #
        # Flow:
        # 1. User requests an admin resource
        # 2. auth_request determines user is authenticated but not an admin
        # 3. Nginx redirects to this named location
        # 4. User is redirected to home page with an error message
        location @error403 {
            # 302 Found redirect to home page with error parameter
            return 302 /home?error=access_denied;
        }


        # Root location - protected by auth
        location = / {
            auth_request /auth/check;
            proxy_pass http://products-backend/;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        # Home location - protected by auth
        location = /home {
            auth_request /auth/check;
            proxy_pass http://products-backend/;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }




        # Handle both GET and POST requests for farmers page and its subpaths
        location ~ ^/farmers(/.*)?$ {
            auth_request /auth/check;
            proxy_pass http://inventory-backend;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        location /products/ {
            auth_request /auth/check;
            proxy_pass http://products-backend/;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        location /orders/ {
            auth_request /auth/check;
            proxy_pass http://orders-backend/;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        location /orders {
            auth_request /auth/check;
            proxy_pass http://orders-backend;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        location /data/ {
            auth_request /auth/check;
            proxy_pass http://data-access-backend/api/data/;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }


        # Updated catalog and checkout locations - protected by auth
        location ~ ^/(catalog|checkout) {
            auth_request /auth/check;
            proxy_pass http://products-backend;


            # Standard proxy settings
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            proxy_cookie_path / /;
            proxy_cookie_domain localhost $host;
            error_page 401 = @error401;
        }
    }
}
