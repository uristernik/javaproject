version: '3.8'

services:
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - admin-service
      - inventory-service
      - product-catalog-service
      - order-management-service
      - data-access-service
      - auth-service

  admin-service:
    build: ./services/admin-service
    expose:
      - "8080"
    depends_on:
      - database

  inventory-service:
    build: ./services/inventory-service
    expose:
      - "8081"
    depends_on:
      - database

  product-catalog-service:
    build: ./services/product-catalog-service
    expose:
      - "8082"
    depends_on:
      - database

  order-management-service:
    build: ./services/order-management-service
    expose:
      - "8084"
    depends_on:
      - database

  data-access-service:
    build: ./services/data-access-service
    expose:
      - "8085"
    depends_on:
      database:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/mydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password

  auth-service:
    build: ./services/auth-service
    expose:
      - "8086"
    depends_on:
      database:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/mydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password

  database:
    image: postgres:alpine
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    expose:
      - "5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql # Mount the SQL file
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["postgres", "-c", "logging_collector=on"]  # Added for better logging

volumes:
  pgdata:
