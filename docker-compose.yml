version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: services/gateway-service/Dockerfile
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      admin-service:
        condition: service_started
      inventory-service:
        condition: service_started
      product-catalog-service:
        condition: service_started
      user-management-service:
        condition: service_started
      order-management-service:
        condition: service_started

  admin-service:
    build:
      context: .
      dockerfile: services/admin-service/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - database

  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - database

  product-catalog-service:
    build:
      context: .
      dockerfile: services/product-catalog-service/Dockerfile
    ports:
      - "8082:8082"
    networks:
      - app-network
    depends_on:
      - database

  user-management-service:
    build:
      context: .
      dockerfile: services/user-management-service/Dockerfile
    ports:
      - "8083:8083"
    networks:
      - app-network
    depends_on:
      database:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/mydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 60s

  order-management-service:
    build:
      context: .
      dockerfile: services/order-management-service/Dockerfile
    ports:
      - "8084:8084"
    networks:
      - app-network
    depends_on:
      - database

  database:
    image: postgres:alpine
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
